////////////////////////////////////////////////////////////////////////////////
//
//  ADOBE SYSTEMS INCORPORATED
//  Copyright 2011 Adobe Systems Incorporated
//  All Rights Reserved.
//
//  NOTICE: Adobe permits you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////

package com.adobe.flascc.vfs
{
	import flash.display.Loader;
	import flash.events.AsyncErrorEvent;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.URLLoader;
	import flash.net.URLLoaderDataFormat;
	import flash.net.URLRequest;
	import flash.utils.ByteArray;
	import flash.utils.Endian;

	/**
	* A BackingStore that uses a URLLoader to load its files. This requires a manifest.as file to be
	* generated by the "genfs" tool in the flascc SDK. After being constructed, an instance of this
	* BackingStore will start downloading the files from the manifest. You can listen to the <code>progress</code>,
	* <code>complete</code> and <code>ioerror</code> events to monitor download progress.
	*
	* <p>After a download has completed it is added to the VFS and is available for use.</p>
	*/
	public class HTTPBackingStore extends InMemoryBackingStore
	{
        // The genfs program generates an as file that
        // defines some of the data needed by this script
        include 'manifest.as'
		
        private var bytesLoaded:uint
		private var percentComplete:uint
		private var currentLoader:URLLoader
		private var currentVPath:String
		private var currentUrls:Array = []
		private var currentContents:ByteArray

		public function HTTPBackingStore()
		{
            initDirs()
			startNewFile()
		}

		private function startNewFile():void
		{
			if(currentVPath == null)
			{
				var newfile:Array = vfsFiles.shift()
				if(newfile == null)
				{
					// All files finished
			        this.dispatchEvent(new Event(Event.COMPLETE))
					return
				}

				currentVPath = newfile[0]
				currentContents = new ByteArray()
				currentContents.endian = Endian.LITTLE_ENDIAN
				currentContents.length = newfile[1]
				currentContents.position = 0
				currentUrls.length = 0
				for(var i:int=2;i<newfile.length; i++)
					currentUrls.push(newfile[i])
			}

			startNewDownload()
		}

		private function startNewDownload():void
		{
			var url:String = currentUrls.shift()
			if(url == null) {
				// we're done with this file, put it in the VFS
				//currentContents.uncompress()
                addFile(currentVPath, currentContents);
				
				// start a new file download
				currentVPath = null
				startNewFile()
				return
			}

			currentLoader = new URLLoader(new URLRequest(url));
			currentLoader.dataFormat= URLLoaderDataFormat.BINARY;
        	currentLoader.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onError)
        	currentLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError)
        	currentLoader.addEventListener(IOErrorEvent.IO_ERROR, onError)
        	currentLoader.addEventListener(Event.COMPLETE, onComplete)
        	currentLoader.addEventListener(ProgressEvent.PROGRESS, onProgress)
		}

        private function onComplete(e:Event):void
        {
        	bytesLoaded += currentLoader.data.length
        	currentContents.writeBytes(currentLoader.data)

        	var pe:ProgressEvent = new ProgressEvent(ProgressEvent.PROGRESS)
        	pe.bytesLoaded = bytesLoaded
        	pe.bytesTotal = vfsTotalSize
            this.dispatchEvent(pe)
            
            startNewDownload()
        }

        private function onError(e:Event):void
        {
            this.dispatchEvent(e)
        }

      	private function onProgress(e:Event):void
        {
        	var pe:ProgressEvent = new ProgressEvent(ProgressEvent.PROGRESS)
        	pe.bytesLoaded = bytesLoaded + e.target.bytesLoaded
        	pe.bytesTotal = vfsTotalSize
            this.dispatchEvent(pe)
        }  
	} 
}